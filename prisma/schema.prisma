generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  image     String?
  accounts  Account[]
  sessions  Session[]
  wines     Wine[]    @relation("UserWines")
  tastings  Tasting[]
  createdAt DateTime  @default(now())
}

model Wine {
  id           String      @id @default(cuid())
  user         User        @relation("UserWines", fields: [userId], references: [id])
  userId       String
  name         String
  producer     String?
  region       Region?     @relation(fields: [regionId], references: [id])
  regionId     String?
  country      String?
  appellation  String?
  vintage      Int?
  grapes       WineGrape[]
  type         String
  abv          Float?
  price        Float?
  rating       Int?
  labelImage   String?
  ocrText      String?
  aiSummary    String?
  aiTags       String      @default("[]")
  foodPairings String      @default("[]")
  notes        Tasting[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId, name])
}

model Tasting {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  wine        Wine     @relation(fields: [wineId], references: [id])
  wineId      String
  date        DateTime @default(now())
  appearance  String?
  nose        String?
  palate      String?
  conclusion  String?
  rating      Int?
  servingTemp Float?
  decantTime  Int?
  createdAt   DateTime @default(now())
}

model Grape {
  id    String      @id @default(cuid())
  name  String      @unique
  wines WineGrape[]
}

model WineGrape {
  wine    Wine   @relation(fields: [wineId], references: [id])
  wineId  String
  grape   Grape  @relation(fields: [grapeId], references: [id])
  grapeId String
  percent Int?

  @@id([wineId, grapeId])
}

model Region {
  id       String   @id @default(cuid())
  name     String
  parent   Region?  @relation("RegionHierarchy", fields: [parentId], references: [id])
  parentId String?
  children Region[] @relation("RegionHierarchy")
  wines    Wine[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
